doc_id, text
)
complaints_corpus <- VCorpus(DataframeSource(complaints))
# clean corpus ----
removeNumPunct <- function(x){gsub("[^[:alpha:][:space:]]*", "", x)}
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(replace_symbol))
corpus <- tm_map(corpus, removeWords, c(stopwords("en")))
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, content_transformer(removeNumPunct))
corpus <- tm_map(corpus, stripWhitespace)
return(corpus)
}
complaints_clean <- clean_corpus(complaints_corpus)
# stem corpus and stem completion ----
complaints_stem <- tm_map(complaints_clean, stemDocument)
stemCompletion2 <- function(x, dictionary) {
x <- unlist(strsplit(as.character(x), " "))
x <- x[x != ""]
x <- stemCompletion(x, dictionary=dictionary)
x <- paste(x, sep="", collapse=" ")
PlainTextDocument(stripWhitespace(x))
}
library(parallel)
no_cores <- detectCores() - 1
complaints_comp <- mclapply(complaints_stem,
stemCompletion2,
dictionary = complaints_clean,
mc.cores=no_cores)
save(complaints_comp, file = "complaints_comp_corpus.RData")
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# sentiment analysis with NRC ----
nrc <- get_sentiments("nrc")
sentiment2 <- function(words){
require(quanteda)
tok = data.frame(word = quanteda::tokens(words)[[1]])
as.character(tok$word)
tok_sent = tok %>%
inner_join(nrc, by = "word") %>%
group_by(sentiment) %>%
mutate(
count = n()
) %>%
arrange(desc(count)) %>%
head(1) %>%
select(sentiment)
if(nrow(tok_sent) == 0){
tok_sent <- data.frame(sentiment = "None")
}
return(tok_sent)
}
data$sentiment <- NA
for (i in 1:nrow(data)) {
data$sentiment[i] = suppressWarnings(sentiment2(data$Consumer.complaint.narrative[i]))
}
data$sentiment <- unlist(data$sentiment)
write_csv(data, "complaints_sentiment.csv")
data %>%
filter(sentiment != "1") %>%
group_by(sentiment) %>%
ggplot(aes(x = sentiment)) +
geom_bar(fill="lightblue", colour="black", width = 0.5) +
labs(x = "Sentiments", y = "Count", title = "Sentiment Analysis") +
theme_bw()
complaints_tf_idf
complaints_tf_idf %>% arrange(desc(count))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(term != "xxxx") %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(term != "xxxx+") %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(term != "x*") %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(term != "(x)*") %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(term != "(x){4,}") %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
unique(complaints_tf_idf$term)
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(term != "xxxx") %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(term != "xxxx",
term != "xxxxxxxx") %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
complaints_tf_idf
complaints_tf_idf %>% arrange(desc(tf))
complaints_comp
complaints_td
complaints
complaints_td
TermDocumentMatrix(as.VCorpus(complaints_comp))
# load libraries ----
library(tidyverse)
library(tm)
library(quanteda)
library(qdap)
library(tidytext)
library(SnowballC)
library(wordcloud)
library(plotrix)
# read data ----
data <- read_csv("complaints_cleaned.csv")
colnames(data)
# create corpus ----
complaints <- data %>%
mutate(
doc_id = as.character(paste("document", row_number(), sep = "")),
text = Consumer.complaint.narrative
) %>%
select(
doc_id, text
)
complaints_corpus <- VCorpus(DataframeSource(complaints))
# clean corpus ----
removeNumPunct <- function(x){gsub("[^[:alpha:][:space:]]*", "", x)}
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(replace_symbol))
corpus <- tm_map(corpus, removeWords, c(stopwords("en")))
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, content_transformer(removeNumPunct))
corpus <- tm_map(corpus, stripWhitespace)
return(corpus)
}
complaints_clean <- clean_corpus(complaints_corpus)
# stem corpus and stem completion ----
complaints_stem <- tm_map(complaints_clean, stemDocument)
stemCompletion2 <- function(x, dictionary) {
x <- unlist(strsplit(as.character(x), " "))
x <- x[x != ""]
x <- stemCompletion(x, dictionary=dictionary)
x <- paste(x, sep="", collapse=" ")
PlainTextDocument(stripWhitespace(x))
}
library(parallel)
no_cores <- detectCores() - 1
complaints_comp <- mclapply(complaints_stem,
stemCompletion2,
dictionary = complaints_clean,
mc.cores=no_cores)
save(complaints_comp, file = "complaints_comp_corpus.RData")
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(term != "xxxx",
term != "xxxxxxxx") %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# sentiment analysis with NRC ----
nrc <- get_sentiments("nrc")
sentiment2 <- function(words){
require(quanteda)
tok = data.frame(word = quanteda::tokens(words)[[1]])
as.character(tok$word)
tok_sent = tok %>%
inner_join(nrc, by = "word") %>%
group_by(sentiment) %>%
mutate(
count = n()
) %>%
arrange(desc(count)) %>%
head(1) %>%
select(sentiment)
if(nrow(tok_sent) == 0){
tok_sent <- data.frame(sentiment = "None")
}
return(tok_sent)
}
data$sentiment <- NA
for (i in 1:nrow(data)) {
data$sentiment[i] = suppressWarnings(sentiment2(data$Consumer.complaint.narrative[i]))
}
data$sentiment <- unlist(data$sentiment)
write_csv(data, "complaints_sentiment.csv")
data %>%
filter(sentiment != "1") %>%
group_by(sentiment) %>%
ggplot(aes(x = sentiment)) +
geom_bar(fill="lightblue", colour="black", width = 0.5) +
labs(x = "Sentiments", y = "Count", title = "Sentiment Analysis") +
theme_bw()
complaints_td
complaints_tf_idf
complaints_comp
complaints_comp$document1
complaints_comp$document1[[1]]
complaints_comp$document1[[2]]
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(term != "xxxx",
term != "xxxxxxxx") %>%
bind_tf_idf(term, count) %>%
arrange(desc(tf_idf))
complaints_tf_idf
complaints_td
complaints_comp
complaints_comp$document1
complaints_comp$document1[[1]]
complaints_comp$document1[[2]]
complaints_comp$document1[[3]]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tm)
library(quanteda)
library(qdap)
library(tidytext)
library(SnowballC)
library(wordcloud)
library(plotrix)
ks <- read_csv("kickstarter_projects_2020_02.csv")
# subset data
most_successful <- ks %>%
arrange(desc(backers_count)) %>%
head(1000) %>%
mutate(
doc_id = paste("success", row_number(), sep = ""),
text = blurb) %>%
select(doc_id, text)
least_successful <- ks %>%
arrange(backers_count) %>%
head(1000) %>%
mutate(
doc_id = paste("failure", row_number(), sep = ""),
text = blurb) %>%
select(doc_id, text)
# create corpus
success_corpus <- VCorpus(DataframeSource(most_successful))
failure_corpus <- VCorpus(DataframeSource(least_successful))
# stem corpus
stemmed_success <- tm_map(clean_success, stemDocument)
# clean corpus
removeNumPunct <- function(x){gsub("[^[:alpha:][:space:]]*", "", x)}
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(replace_symbol))
corpus <- tm_map(corpus, removeWords, c(stopwords("en")))
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, content_transformer(removeNumPunct))
corpus <- tm_map(corpus, stripWhitespace)
return(corpus)
}
clean_success <- clean_corpus(success_corpus)
clean_failure <- clean_corpus(failure_corpus)
# stem corpus
stemmed_success <- tm_map(clean_success, stemDocument)
stemmed_failure <- tm_map(clean_failure, stemDocument)
# stem completion
stemCompletion2 <- function(x, dictionary) {
x <- unlist(strsplit(as.character(x), " "))
x <- x[x != ""]
x <- stemCompletion(x, dictionary=dictionary)
x <- paste(x, sep="", collapse=" ")
PlainTextDocument(stripWhitespace(x))
}
compl_success <- lapply(stemmed_success, content_transformer(stemCompletion2), dictionary = clean_success)
compl_failure <- lapply(stemmed_failure, content_transformer(stemCompletion2), dictionary = clean_failure)
# create document-term-matrix
success_dtm <- as.matrix(DocumentTermMatrix(as.VCorpus(compl_success)))
failure_dtm <- as.matrix(DocumentTermMatrix(as.VCorpus(compl_failure)))
# create term-document-matrix
success_td <- tidy(TermDocumentMatrix(as.VCorpus(compl_success)))
failure_td <- tidy(TermDocumentMatrix(as.VCorpus(compl_failure)))
success_tf_idf <- success_td %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
failure_tf_idf <- failure_td %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
success_tf_idf
complaints_td
success_td
compl_success
compl_success$success1
compl_success$success1[[1]]
compl_success$success1[[2]]
complaints_comp$document1[[1]]
complaints_comp$document1[[2]]
stemmed_success
stemmed_success$success1[[1]]
complaints_stem
complaints_stem$document1
complaints_comp <- lapply(complaints_stem,
content_transformer(stemCompletion2),
dictionary = complaints_clean)
library(parallel)
no_cores <- detectCores() - 1
complaints_comp <- mclapply(complaints_stem,
content_transformer(stemCompletion2),
dictionary = complaints_clean,
mc.cores = no_cores)
save(complaints_comp, file = "complaints_comp_corpus.RData")
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(term != "xxxx",
term != "xxxxxxxx") %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
complaints_td
complaints_td %>% arrange(desc(tf))
complaints_tf_idf %>% arrange(desc(tf))
complaints_tf_idf %>% arrange(desc(tf))[10]
complaints_tf_idf %>% arrange(desc(tf))[10,]
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(!str_detect(term, "(x)+{2,}")) %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(!str_detect(term, "(x)+{2,}", negate=T)) %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(!str_detect(term, "(x)+", negate=T)) %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(!str_detect(term, "(xxxx)+", negate=T)) %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(str_detect(term, "(xxxx)+", negate=T) == FALSE) %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(str_detect(term, "xxxx", negate=T) == FALSE) %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
#filter() %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
complaints_tf_idf %>% arrange(desc(tf))
# create term-document matrix ----
complaints_td <- tidy(TermDocumentMatrix(as.VCorpus(complaints_comp)))
complaints_tf_idf <- complaints_td %>%
filter(str_detect(term, "xxxx") == FALSE) %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2.5,0.1))
# word cloud
set.seed(7)
wordcloud(complaints_tf_idf$term, complaints_tf_idf$tf, max.words = 50, colors = blues9 ,scale=c(2,0.1))
data %>%
filter(sentiment != "1") %>%
group_by(sentiment) %>%
ggplot(aes(x = sentiment)) +
geom_bar(width = 0.5) +
labs(x = "Sentiments", y = "Count", title = "Sentiment Analysis") +
theme_bw()
data %>%
filter(sentiment != "1") %>%
group_by(sentiment) %>%
ggplot(aes(x = sentiment)) +
geom_bar(width = 0.5) +
geom_text(size = 3)
data %>%
filter(sentiment != "1") %>%
group_by(sentiment) %>%
ggplot(aes(x = sentiment)) +
geom_bar(width = 0.5) +
geom_text(size = 3, position = 0) +
labs(x = "Sentiments", y = "Count", title = "Sentiment Analysis") +
theme_bw()
data %>%
filter(sentiment != "1") %>%
group_by(sentiment) %>%
ggplot(aes(x = sentiment)) +
geom_bar(width = 0.5) +
geom_text(size = 3, position = position_stack(vjust = 0.5))) +
data %>%
filter(sentiment != "1") %>%
group_by(sentiment) %>%
ggplot(aes(x = sentiment)) +
geom_bar(width = 0.5) +
geom_text(aes(label=Number), position=position_dodge(width=0.9)) +
labs(x = "Sentiments", y = "Count", title = "Sentiment Analysis") +
theme_bw()
data %>%
filter(sentiment != "1") %>%
group_by(sentiment) %>%
ggplot(aes(x = sentiment)) +
geom_bar(width = 0.5) +
labs(x = "Sentiments", y = "Count", title = "Sentiment Analysis") +
theme_bw()
complaints_tf_idf
complaints_cnt <- complaints_tf_idf %>%
group_by(term) %>%
summarise(
agg_cnt = sum(count)
) %>%
arrange(desc(agg_cnt))
complaints_cnt
complaints_cnt <- complaints_tf_idf %>%
group_by(term) %>%
summarise(
count = sum(count)
) %>%
arrange(desc(count))
head(complaints_cnt)
set.seed(7)
wordcloud(complaints_cnt$term, complaints_cnt$count, max.words = 50, colors = blues9 ,scale=c(2,0.1))
set.seed(7)
wordcloud(complaints_cnt$term, complaints_cnt$count, max.words = 50, colors = blues9 ,scale=c(3,0.1))
set.seed(7)
wordcloud(complaints_cnt$term, complaints_cnt$count, max.words = 50, colors = blues9 ,scale=c(5,0.1))
set.seed(7)
wordcloud(complaints_cnt$term, complaints_cnt$count, max.words = 50, colors = blues9 ,scale=c(5,2))
set.seed(7)
wordcloud(complaints_cnt$term, complaints_cnt$count, max.words = 50, colors = blues9 ,scale=c(4,0.2))
set.seed(17)
wordcloud(complaints_cnt$term, complaints_cnt$count, max.words = 50, colors = blues9 ,scale=c(4,0.2))
